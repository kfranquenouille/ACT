package app;

/**
 * classe du parcoureur de solution pour bin_packing selon un critère glouton XX
 * 
 * et avec choix de l’énumération
 */
public class SolutionWalkerBinPackXX extends SolutionWalkerBinPack {

	/**
	 * on peut passer en en parametre: deux énumérations ici:
	 * online et par poids décroissants
	 * on peut aussi simplement construire le probleme avec objets tries au depart.... 
	 * 
	 * @param pbl Le problème
	 * @param en Le type d'énumération
	 */
	public SolutionWalkerBinPackXX(PblBinPack pbl, EnumerationObjets en) {
		super(pbl, new PartialSolutionBinPack(pbl, en), en);
	}

	public static void main (String args[]) {
		PblBinPack pb;
		EnumerationObjets enuma;
		SolutionWalker sol;

		if(args.length < 1 ) {
			System.out.print("Il manque le nom de fichier");
		} else {		
			pb = new PblBinPack(args[0]);
			
			if(args.length < 2 ) {
				enuma = new EnumerationOnline(pb.getPoids(),pb.getNbobjets());
				sol = new SolutionWalkerBinPackXX(pb,enuma);
				sol.run();		
			} else {
				if(args[1].equals("-on")) {
					enuma = new EnumerationOnline(pb.getPoids(),pb.getNbobjets());
					sol = new SolutionWalkerBinPackXX(pb,enuma);
					sol.run();
				}
				if(args[1].equals("-off")) {
					enuma = new EnumerationTriee(pb.getPoids(), pb.getNbobjets());
					sol = new SolutionWalkerBinPackXX(pb,enuma);
					sol.run();
				} else {
					System.out.print("Argument invalide");
				}
			}		
		}
	}
}